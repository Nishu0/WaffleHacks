<html>
<head>
    <title>WaffleHacks AI</title>
    <link href="./style.css" rel="stylesheet">   
    
    <!-- include astica javascript api version 2023-04-10 -->
    <script src="https://astica.ai/javascript-sdk/2023-04-10/astica.api.js"></script>
</head>
<body>
    <hr style="margin-top:15px;">       
    <input type="hidden" id="astica_ML_apikey" value="<%= process.env.API_KEY %>">
    
    <label for="astica_ML_apikey"></label>
    <select id="astica_ML_version">
        <option value="1.0_full" <% if (process.env.MODEL_VERSION === '1.0_full') { %>selected<% } %>>1.0_full</option>
        <option value="2.0_full" <% if (process.env.MODEL_VERSION === '2.0_full') { %>selected<% } %>>2.0_full</option>
    </select>

    <input type="hidden" id="astica_ML_options" value="<%= process.env.DESCRIBE_PARAMETERS %>">
    <small style="display:block; margin-top:5px;">Comma separated, leave blank for all</small>

    <label for="astica_ML_apikey"><b>Enter Image URL</b></label><br>
    <input type="text" id="astica_ML_analyze_input" placeholder="https://" value="https://astica.ai/example/asticaVision_sample.jpg">
    <label for="astica_ML_file_input"><b>OR Select Local Image File</b> <small>(Slower, requires upload)</small></label>
    <input type="file" id="astica_ML_file_input" accept="image/*">
    <button id="astica_ML_capture_button" onclick="captureImageFromCamera();">Capture</button> <!-- Added capture button -->
    <button id="astica_ML_save_button" onclick="saveImageToLocalDevice();" style="display: none;">Save</button> <!-- Added save button with display none -->
    <hr>
    <button id="astica_demoSubmit" onclick="asticaVision_describeExample();">Describe Image</button>

    <img src="https://www.astica.org/img/icon.png" id="astica_ML_vision_input" style="display: none; width:300px;  margin:40px 0px;"></textarea>
    <h4 id="astica_ML_caption_output" style="display:none;"></h4> <!-- Added h4 tag for displaying caption -->
    <h2 id="astica_ML_vision_output_title" style="display:none;">Output:</h2>
    <pre id="astica_ML_vision_output" style="display:none;"></pre>


    <script>
        function asticaVision_describeExample() {
            if (document.getElementById("astica_ML_apikey").value == '') { 
                alert("Please provide your astica.org API key");
                return;
            }
            asticaAPI_start(document.getElementById("astica_ML_apikey").value); //only needs to be called once.               
            document.getElementById("astica_ML_vision_output").innerHTML = '';   

            var vision_image_display = document.getElementById("astica_ML_analyze_input").value;
            document.getElementById("astica_ML_vision_input").src = vision_image_display;                           

            var astica_ML_options = document.getElementById("astica_ML_options").value; 
            if (astica_ML_options == '') { astica_ML_options = 'all'; }
            console.log(astica_ML_options);
            asticaVision(
                document.getElementById("astica_ML_version").value,
                document.getElementById("astica_ML_analyze_input").value,
                astica_ML_options,
                your_astica_CallBack,
            );
            document.getElementById("astica_demoSubmit").disabled = true;
            setTimeout(function() {
                document.getElementById("astica_demoSubmit").disabled = false;
            }, 1500);  
        }  

        function your_astica_CallBack(data) {             
            document.getElementById("astica_ML_vision_output_title").style.display = 'block';
            document.getElementById("astica_ML_vision_output").style.display = 'block';
            document.getElementById("astica_ML_vision_input").style.display = 'block';
            document.getElementById("astica_ML_vision_output").textContent = JSON.stringify(data, null, 2);
            document.getElementById("astica_ML_vision_output").scrollIntoView({ behavior: "smooth", block: "start", inline: "nearest" });

            const caption = data.caption_GPTS;
            if (caption) {
                document.getElementById("astica_ML_caption_output").textContent = caption;
                document.getElementById("astica_ML_caption_output").style.display = 'block';
            }
        }

        document.getElementById("astica_ML_file_input").addEventListener("change", async function() {
            const file = this.files[0];
            if (file) {
                // Create a FormData object to send the file to the server
                const formData = new FormData();
                formData.append("image", file);
                
                try {
                    // Make a POST request to the server to upload the file
                    const response = await fetch("/upload", {
                        method: "POST",
                        body: formData
                    });

                    const data = await response.json();
                    
                    // Set the Cloudinary URL as the input value
                    document.getElementById("astica_ML_analyze_input").value = data.imageUrl;
                    asticaVision_describeExample();
                } catch (error) {
                    console.error("Error:", error);
                }
            }
        });

        function captureImageFromCamera() {
            const videoElement = document.createElement('video');
            const canvasElement = document.createElement('canvas');
            canvasElement.width = 300;
            canvasElement.height = 300;
            const constraints = { video: true };

            try {
                navigator.mediaDevices.getUserMedia(constraints)
                    .then((stream) => {
                        videoElement.srcObject = stream;
                        videoElement.onloadedmetadata = (e) => {
                            videoElement.play();
                        };
                    })
                    .catch((err) => {
                        console.error("Error accessing camera:", err);
                    });

                document.body.appendChild(videoElement);
                document.body.appendChild(canvasElement);

                const captureButton = document.getElementById("astica_ML_capture_button");
                captureButton.disabled = true;

                const saveButton = document.getElementById("astica_ML_save_button");
                saveButton.disabled = false;
                saveButton.style.display = "block"; // Show the save button

                saveButton.addEventListener('click', () => {
                    const context = canvasElement.getContext('2d');
                    context.drawImage(videoElement, 0, 0, canvasElement.width, canvasElement.height);
                    const imageDataUrl = canvasElement.toDataURL();
                    saveButton.disabled = true;
                    saveImageToCloudinary(imageDataUrl);
                });
            } catch (error) {
                console.error("Error accessing camera:", error);
            }
        }

        async function saveImageToCloudinary(imageDataUrl) {
            const formData = new FormData();
            const blob = await fetch(imageDataUrl).then((response) => response.blob());
            formData.append("image", blob);

            try {
                const response = await fetch("/upload", {
                    method: "POST",
                    body: formData
                });

                const data = await response.json();
                document.getElementById("astica_ML_analyze_input").value = data.imageUrl;
                asticaVision_describeExample();
            } catch (error) {
                console.error("Error uploading image to Cloudinary:", error);
            }
        }

        function saveImageToLocalDevice() {
            const canvasElement = document.createElement('canvas');
            canvasElement.width = 300;
            canvasElement.height = 300;
            const imageElement = document.getElementById("astica_ML_vision_input");
            const context = canvasElement.getContext('2d');
            context.drawImage(imageElement, 0, 0, canvasElement.width, canvasElement.height);

            const link = document.createElement('a');
            link.href = canvasElement.toDataURL();
            link.download = 'image.png';
            link.click();
        }
    </script> 

    <!--- Demo assets; non-API related --->
    <link href="https://fonts.googleapis.com/css?family=Quicksand:400,500,600,700&display=swap" rel="stylesheet">      
</body>
</html>
